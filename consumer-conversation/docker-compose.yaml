version: "3.8"

services:
  influxdb:
    image: influxdb:2.6
    ports:
      - "8086:8086"
    volumes:
      - influxdb-storage:/var/lib/influxdb2
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8086/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    environment:
      - INFLUXDB_INIT_MODE=${INFLUXDB_INIT_MODE}
      - INFLUXDB_USERNAME=${INFLUXDB_USERNAME}
      - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
    networks:
      - producer_app-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-storage:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    networks:
      - producer_app-network
    restart: unless-stopped

  postgres-metabase:
    image: postgres:15
    environment:
      POSTGRES_USER: metabase
      POSTGRES_PASSWORD: metabase_password
      POSTGRES_DB: metabase_db
    volumes:
      - postgres-metabase-data:/var/lib/postgresql/data
    networks:
      - producer_app-network
    restart: unless-stopped

  metabase:
    image: metabase/metabase
    platform: linux/amd64
    ports:
      - "3001:3000"
    environment:
      # Metabase DB connection to Postgres
      MB_DB_TYPE: "postgres"
      MB_DB_DBNAME: "metabase_db"
      MB_DB_PORT: 5432
      MB_DB_USER: "metabase"
      MB_DB_PASS: "metabase_password"
      MB_DB_HOST: "postgres-metabase"
    depends_on:
      - postgres-metabase
    networks:
      - producer_app-network
    restart: unless-stopped

  text_consumer:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET_TEXT_NER}
    volumes:
      - ./text_consumer.py:/app/text_consumer.py:ro
      - ./requirements.txt:/app/requirements.txt:ro
    command: ["python", "/app/text_consumer.py"]
    networks:
      - producer_app-network
    depends_on:
      - influxdb
    restart: unless-stopped

  voice_consumer:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - RABBITMQ_PORT=${RABBITMQ_PORT}
      - RABBITMQ_USER=${RABBITMQ_USER}
      - RABBITMQ_PASS=${RABBITMQ_PASS}
      - RABBITMQ_VHOST=${RABBITMQ_VHOST}
      - INFLUXDB_URL=${INFLUXDB_URL}
      - INFLUXDB_ORG=${INFLUXDB_ORG}
      - INFLUXDB_BUCKET=${INFLUXDB_BUCKET_VOICE_NER}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - INFLUXDB_TOKEN=${INFLUXDB_TOKEN}
    volumes:
      - ./voice_consumer.py:/app/voice_consumer.py:ro
      - ./requirements.txt:/app/requirements.txt:ro
    command: ["python", "/app/voice_consumer.py"]
    networks:
      - producer_app-network
    depends_on:
      - influxdb
    restart: unless-stopped

networks:
  producer_app-network:
    external: true

volumes:
  grafana-storage:
  influxdb-storage:
  metabase-data:
  postgres-metabase-data:
