version: '2.4'

services:
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis:
    container_name: redis
    image: redis:7
    ports:
      - "6379:6379"
    command: ["redis-server", "--save", "60", "1"]
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis-commander:
    container_name: redis-commander
    image: rediscommander/redis-commander:latest
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - REDIS_HOSTS=local:${REDIS_HOST}:6379
    ports:
      - "8081:8081"
    networks:
      - app-network

  minio:
    container_name: minio
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
      start_period: 10s
    networks:
      - app-network

  text_producer:
    container_name: text_producer
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
    volumes:
      - ./text_producer.py:/app/text_producer.py
      - ./utils.py:/app/utils.py
      - ./requirements.txt:/app/requirements.txt
    command: ["python", "/app/text_producer.py"]
    networks:
      - app-network

  voice_producer:
    container_name: voice_producer
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./voice_producer.py:/app/voice_producer.py
      - ./utils.py:/app/utils.py
      - ./requirements.txt:/app/requirements.txt
      - ./audio_files:/app/audio_files
    command: ["python", "/app/voice_producer.py"]
    networks:
      - app-network

  voice_dlq_consumer:
    container_name: voice_dlq_consumer
    build:
      context: ./dlq
      dockerfile: ../Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    volumes:
      - ./dlq/voice_dlq_consumer.py:/app/voice_dlq_consumer.py
      - ./dlq/requirements.txt:/app/requirements.txt
    command: [ "python", "/app/voice_dlq_consumer.py" ]
    networks:
      - app-network

  text_dlq_consumer:
    container_name: text_dlq_consumer
    build:
      context: ./dlq
      dockerfile: ../Dockerfile
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - RABBITMQ_HOST=${RABBITMQ_HOST}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
    volumes:
      - ./dlq/text_dlq_consumer.py:/app/text_dlq_consumer.py
      - ./dlq/requirements.txt:/app/requirements.txt
    command: [ "python", "/app/text_dlq_consumer.py" ]
    networks:
      - app-network


volumes:
  minio-data:

networks:
  app-network:
    driver: bridge
